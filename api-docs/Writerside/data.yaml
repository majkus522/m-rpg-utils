openapi: 3.0.3
paths:
  /players:
    get:
      summary: Get all players
      description: Get all players. Returns only usernames.
      parameters:
        - name: order
          in: query
          description: Sort players
          schema:
            $ref: '#/components/schemas/OrderPlayers'
        - name: search
          in: query
          description: Search players by username
          schema:
            type: string
        - name: clazz
          in: query
          description: Filter players by their class
          schema:
            $ref: '#/components/schemas/PlayerClass'
        - name: Result-Count
          in: header
          description: "Maximal number of objects returned. Default: 50."
          schema:
            type: int
        - name: Result-Offset
          in: header
          description: "Offset of returned objects. Default: 0."
          schema:
            type: int
      responses:
        '206':
          description: Successful operation
          headers:
            Return-Count:
              description: Number of objects returned.
              schema:
                type: int
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerProtected'
        '400':
          description: Incorrect request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Can't find any players matching conditions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Register new player
      description: Register new player. Automatically logins player and returns session key.
      requestBody:
        description: Register a new player.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerRegister'
      responses:
        '201':
          description: Successful operation
          content:
            session-key:
              schema:
                type: string
        '400':
          description: Incorrect request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /players/{$username}:
    get:
      summary: Get single player
      description: Get player full data. Return only simple data if session is incorrect or isn't entered.
      parameters:
        - name: username
          in: path
          description: Username of player
          required: true
          schema:
            type: string
        - name: Session-Type
          in: header
          description: Type of session
          schema:
            $ref: '#/components/schemas/SessionType'
        - name: Session-Key
          in: header
          description: Key of session
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '206':
          description: Incorrect session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerProtected'
        '404':
          description: Player doesn't exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Change player data
      description: Change player data. At least one property must be present in the request body, otherwise it will throw a error 400.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerUpdate'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Incorrect request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete player
      description: Delete player and all related data.
      parameters:
        - name: username
          in: path
          description: Username of player
          required: true
          schema:
            type: string
        - name: Session-Type
          in: header
          description: Type of session
          required: true
          schema:
            $ref: '#/components/schemas/SessionType'
        - name: Session-Key
          in: header
          description: Key of session
          required: true
          schema:
            type: int
      responses:
        '204':
          description: Successful operation
        '400':
          description: Enter player
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /players/{$username}/login:
    get:
      summary: Login player
      description: Login player and get session key.
      parameters:
        - name: username
          in: path
          description: Username of player
          required: true
          schema:
            type: string
        - name: Session-Type
          in: header
          description: Type of session
          required: true
          schema:
            $ref: '#/components/schemas/SessionType'
        - name: Password
          in: header
          description: Player password. Must be encoded using BASE64
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            session-key:
              schema:
                type: string
        '400':
          description: Incorrect request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Incorrect password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Player doesn't exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /players/{$username}/session:
    get:
      summary: Check player session
      description: Check if player session is correct.
      parameters:
        - name: username
          in: path
          description: Username of player
          required: true
          schema:
            type: string
        - name: Session-Type
          in: header
          description: Type of session
          required: true
          schema:
            $ref: '#/components/schemas/SessionType'
        - name: Session-Key
          in: header
          description: Key of session
          required: true
          schema:
            type: int
      responses:
        '204':
          description: Successful operation
        '400':
          description: Incorrect request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Incorrect session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Player doesn't exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /players/{$username}/leave:
    patch:
      summary: Leave guild
      description: Leave your guild.
      parameters:
        - name: username
          in: path
          description: Username of player
          required: true
          schema:
            type: string
        - name: Session-Type
          in: header
          description: Type of session
          required: true
          schema:
            $ref: '#/components/schemas/SessionType'
        - name: Session-Key
          in: header
          description: Key of session
          required: true
          schema:
            type: int
      responses:
        '204':
          description: Successful operation
        '400':
          description: Incorrect request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /password-recovery:
    post:
      summary: Send recovery email
      description: Sends password recovery email to player.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRecoverySend'
      responses:
        '201':
          description: Successful operation
        '400':
          description: Enter username or email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Player doesn't exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /password-recovery/{$code}:
    patch:
      summary: Set players new password
      description: Sets a new password for users who have forgotten it.
      parameters:
        - name: code
          in: path
          description: Password recovery code
          required: true
          schema:
            type: string
      requestBody:
        description: New password.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRecoveryPatch'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Incorrect request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Code expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /skills/{$username}:
    get:
      summary: Get player skills
      description: Get player skills.
      parameters:
        - name: username
          in: path
          description: Username of player
          required: true
          schema:
            type: string
        - name: Session-Type
          in: header
          description: Type of session
          required: true
          schema:
            $ref: '#/components/schemas/SessionType'
        - name: Session-Key
          in: header
          description: Key of session
          required: true
          schema:
            type: int
        - name: Result-Count
          in: header
          description: "Maximal number of objects returned. Default: 50."
          schema:
            type: int
        - name: Result-Offset
          in: header
          description: "Offset of returned objects. Default: 0."
          schema:
            type: int
        - name: rarity
          in: query
          description: Filter skills by their rarity (Enum)
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Rarity'
        - name: toggle
          in: query
          description: Get only disabled or enabled skills
          schema:
            type: bool
        - name: search
          in: query
          description: Search skills by name
          schema:
            type: string
        - name: order
          in: query
          description: Order skills
          schema:
            $ref: '#/components/schemas/OrderSkills'
      responses:
        '200':
          description: Successful operation
          headers:
            Return-Count:
              description: Number of objects returned.
              schema:
                type: int
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
        '400':
          description: Incorrect request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Can't find
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /skills/{$username}/{$skill}:
    get:
      summary: Check if player has skill
      description: Check if player has skill.
      parameters:
        - name: username
          in: path
          description: Username of player
          required: true
          schema:
            type: string
        - name: skill
          in: path
          description: Skill to check
          required: true
          schema:
            type: string
        - name: Session-Type
          in: header
          description: Type of session
          required: true
          schema:
            $ref: '#/components/schemas/SessionType'
        - name: Session-Key
          in: header
          description: Key of session
          required: true
          schema:
            type: int
      responses:
        '204':
          description: Successful operation
        '404':
          description: Can't find
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Toggle players skill
      description: Toggle players skill.
      parameters:
        - name: username
          in: path
          description: Username of player
          required: true
          schema:
            type: string
        - name: skill
          in: path
          description: Skill to check
          required: true
          schema:
            type: string
        - name: Session-Type
          in: header
          description: Type of session
          required: true
          schema:
            $ref: '#/components/schemas/SessionType'
        - name: Session-Key
          in: header
          description: Key of session
          required: true
          schema:
            type: int
      requestBody:
        description: New toggle value.
        required: true
        content:
          toggle:
            schema:
              type: bool
      responses:
        '204':
          description: Successful operation
        '400':
          description: Incorrect request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Can't find
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /fake-status/${username}:
    get:
      summary: Get players fake status
      description: Get players fake status.
      parameters:
        - name: username
          in: path
          description: Username of player
          required: true
          schema:
            type: string
        - name: Session-Type
          in: header
          description: Type of session
          required: true
          schema:
            $ref: '#/components/schemas/SessionType'
        - name: Session-Key
          in: header
          description: Key of session
          required: true
          schema:
            type: int
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FakeStatus'
        '404':
          description: Can't find
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create fake status for player
      description: Create fake status for player.
      parameters:
        - name: username
          in: path
          description: Username of player
          required: true
          schema:
            type: string
        - name: Session-Type
          in: header
          description: Type of session
          required: true
          schema:
            $ref: '#/components/schemas/SessionType'
        - name: Session-Key
          in: header
          description: Key of session
          required: true
          schema:
            type: int
      requestBody:
        description: Data for fake status
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FakeStatusEdit'
      responses:
        '201':
          description: Successful operation
        '400':
          description: Incorrect request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Can't find
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Create fake status for player
      description: Create fake status for player.
      parameters:
        - name: username
          in: path
          description: Username of player
          required: true
          schema:
            type: string
        - name: Session-Type
          in: header
          description: Type of session
          required: true
          schema:
            $ref: '#/components/schemas/SessionType'
        - name: Session-Key
          in: header
          description: Key of session
          required: true
          schema:
            type: int
      requestBody:
        description: Data for fake status
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FakeStatusEdit'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Incorrect request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Incorrect request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Player:
      type: object
      properties:
        id:
          type: int
        username:
          type: string
        email:
          type: string
        level:
          type: int
        exp:
          type: int
        money:
          type: number
          format: float
        clazz:
          $ref: '#/components/schemas/PlayerClass'
        str:
          type: int
        agl:
          type: int
        chr:
          type: int
        intl:
          type: int
        def:
          type: int
        vtl:
          type: int
        dex:
          type: int
    PlayerProtected:
      type: object
      properties:
        id:
          type: int
        username:
          type: string
    PlayerRegister:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
    PlayerUpdate:
      type: object
      properties:
        password:
          type: string
        email:
          type: string
    PasswordRecoverySend:
      type: object
      properties:
        username:
          type: string
          example: username1
        email:
          type: string
          example: example@mail.com
    PasswordRecoveryPatch:
      type: object
      properties:
        password:
          type: string
    Skill:
      type: object
      properties:
        id:
          type: int
        player:
          type: int
        skill:
          type: string
        toggle:
          type: bool
    FakeStatus:
      type: object
      properties:
        id:
          type: int
        player:
          type: int
        level:
          type: int
        money:
          type: number
          format: float
        clazz:
          $ref: '#/components/schemas/PlayerClass'
        str:
          type: int
        agl:
          type: int
        chr:
          type: int
        intl:
          type: int
        def:
          type: int
        vtl:
          type: int
        dex:
          type: int
    FakeStatusEdit:
      type: object
      properties:
        level:
          type: int
          example: 1
        money:
          type: number
          format: float
          example: 1
        clazz:
          $ref: '#/components/schemas/PlayerClass'
          example: archer
        str:
          type: int
          example: 1
        agl:
          type: int
          example: 1
        chr:
          type: int
          example: 1
        intl:
          type: int
          example: 1
        def:
          type: int
          example: 1
        vtl:
          type: int
          example: 1
        dex:
          type: int
          example: 1
    Error:
      type: object
      properties:
        message:
          type: string
        file:
          type: string
        line:
          type: int
    PlayerClass:
      type: string
      enum:
        - archer
        - mage
        - sorcerer
        - tank
        - warlock
        - warrior
    OrderPlayers:
      type: string
      enum:
        - level
        - level-desc
        - money
        - money-desc
        - str
        - str-desc
        - agl
        - agl-desc
        - chr
        - chr-desc
        - intl
        - intl-desc
        - def
        - def-desc
        - vtl
        - vtl-desc
        - dex
        - dex-desc
    OrderSkills:
      type: string
      enum:
        - rarity
        - rarity-desc
    SessionType:
      type: string
      enum:
        - website
        - game
    Rarity:
      type: string
      enum:
        - common
        - extra
        - unique
        - ultimate
        - unknown